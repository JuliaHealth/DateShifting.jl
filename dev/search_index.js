var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DateShifting","category":"page"},{"location":"#DateShifting","page":"Home","title":"DateShifting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DateShifting]","category":"page"},{"location":"#DateShifting.sequence_and_intervals-Tuple{Array{Dates.DateTime,1}}","page":"Home","title":"DateShifting.sequence_and_intervals","text":"sequence_and_intervals(input_dt_list::Vector{Dates.DateTime};\n                       round_to::Dates.Period)\n\nArguments\n\ninput_dt_list::Vector{Dates.DateTime}: A vector of DateTimes.\n\nKeyword Arguments\n\nround_to::Dates.Period: Resolution to which all intervals should be rounded.\n\nExample\n\njulia> using Dates\n\njulia> using DateShifting\n\njulia> dates = [\n           DateTime(\"2000-01-01T00:00:00\"),\n           DateTime(\"2000-02-01T00:00:00\"),\n           DateTime(\"2000-01-05T00:00:00\"),\n           DateTime(\"2000-01-02T04:05:06\"),\n           DateTime(\"2000-01-02T01:02:03\"),\n       ]\n5-element Array{DateTime,1}:\n 2000-01-01T00:00:00\n 2000-02-01T00:00:00\n 2000-01-05T00:00:00\n 2000-01-02T04:05:06\n 2000-01-02T01:02:03\n\njulia> sequence, intervals = sequence_and_intervals(dates; round_to = Day(1))\n([1, 5, 4, 3, 2], Dates.Day[0 days, 31 days, 4 days, 1 day, 1 day])\n\njulia> sequence\n5-element Array{Int64,1}:\n 1\n 5\n 4\n 3\n 2\n\njulia> intervals\n5-element Array{Day,1}:\n 0 days\n 31 days\n 4 days\n 1 day\n 1 day\n\n\n\n\n\n","category":"method"},{"location":"#DateShifting.sequence_and_intervals-Tuple{Array{TimeZones.ZonedDateTime,1}}","page":"Home","title":"DateShifting.sequence_and_intervals","text":"sequence_and_intervals(input_zdt_list::Vector{TimeZones.ZonedDateTime},\n                       round_to::Dates.Period)\n\nArguments\n\ninput_zdt_list::Vector{TimeZones.ZonedDateTime}: A vector of ZonedDateTimes.\n\nKeyword Arguments\n\nround_to::Dates.Period: Resolution to which all intervals should be rounded.\n\nExample\n\njulia> using Dates\n\njulia> using DateShifting\n\njulia> using TimeZones\n\njulia> dates = [\n           ZonedDateTime(DateTime(\"2000-01-01T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-02-01T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-01-05T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-01-02T03:05:06\"), tz\"America/Chicago\"),\n           ZonedDateTime(DateTime(\"2000-01-02T01:02:03\"), tz\"America/New_York\"),\n       ]\n5-element Array{ZonedDateTime,1}:\n 2000-01-01T00:00:00-05:00\n 2000-02-01T00:00:00-05:00\n 2000-01-05T00:00:00-05:00\n 2000-01-02T03:05:06-06:00\n 2000-01-02T01:02:03-05:00\n\njulia> sequence, intervals = sequence_and_intervals(dates; round_to = Day(1))\n([1, 5, 4, 3, 2], Dates.Day[0 days, 31 days, 4 days, 1 day, 1 day])\n\njulia> sequence\n5-element Array{Int64,1}:\n 1\n 5\n 4\n 3\n 2\n\njulia> intervals\n5-element Array{Day,1}:\n 0 days\n 31 days\n 4 days\n 1 day\n 1 day\n\n\n\n\n\n","category":"method"},{"location":"#DateShifting.sequence_and_random_date_shift-Tuple{Random.AbstractRNG,Array{Dates.DateTime,1}}","page":"Home","title":"DateShifting.sequence_and_random_date_shift","text":"sequence_and_random_date_shift(rng::Random.AbstractRNG,\n                               input_dt_list::Vector{Dates.DateTime};\n                               round_to::Dates.Period)\n\nArguments\n\ninput_dt_list::Vector{Dates.DateTime}: A vector of DateTimes.\n\nKeyword Arguments\n\nround_to::Dates.Period: Resolution to which all intervals should be rounded.\ntime_zone::Dates.TimeZone: Time zone to which all output dates should be converted.\nday::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Day shift amount will be sampled.\nhour::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Hour shift amount will be sampled.\nminute::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Minute shift amount will be sampled.\nsecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Second shift amount will be sampled.\nmillisecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Millisecond shift amount will be sampled.\nmicrosecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Microsecond shift amount will be sampled.\nnanosecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Nanosecond shift amount will be sampled.\n\nExample\n\njulia> using Dates\n\njulia> using DateShifting\n\njulia> using Distributions\n\njulia> using Random\n\njulia> using TimeZones\n\njulia> dates = [\n           DateTime(\"2000-01-01T00:00:00\"),\n           DateTime(\"2000-02-01T00:00:00\"),\n           DateTime(\"2000-01-05T00:00:00\"),\n           DateTime(\"2000-01-02T04:05:06\"),\n           DateTime(\"2000-01-02T01:02:03\"),\n       ]\n5-element Array{DateTime,1}:\n 2000-01-01T00:00:00\n 2000-02-01T00:00:00\n 2000-01-05T00:00:00\n 2000-01-02T04:05:06\n 2000-01-02T01:02:03\n\njulia> sequence, shifted_dates = sequence_and_random_date_shift(\n           Random.GLOBAL_RNG,\n           dates;\n           round_to = Day(1),\n           time_zone = TimeZone(\"America/New_York\"),\n           day = DiscreteUniform(-31, 31),\n           hour = DiscreteUniform(-24, 24),\n           minute = DiscreteUniform(-60, 60),\n           second = DiscreteUniform(-60, 60),\n           millisecond = DiscreteUniform(-1000, 1000),\n           microsecond = DiscreteUniform(-1000, 1000),\n           nanosecond = DiscreteUniform(-1000, 1000),\n       )\n([1, 5, 4, 3, 2], TimeZones.ZonedDateTime[ZonedDateTime(1999, 12, 5, tz\"America/New_York\"), ZonedDateTime(2000, 1, 5, tz\"America/New_York\"), ZonedDateTime(1999, 12, 9, tz\"America/New_York\"), ZonedDateTime(1999, 12, 6, tz\"America/New_York\"), ZonedDateTime(1999, 12, 6, tz\"America/New_York\")])\n\njulia> sequence\n5-element Array{Int64,1}:\n 1\n 5\n 4\n 3\n 2\n\njulia> shifted_dates\n5-element Array{ZonedDateTime,1}:\n 1999-12-05T00:00:00-05:00\n 2000-01-05T00:00:00-05:00\n 1999-12-09T00:00:00-05:00\n 1999-12-06T00:00:00-05:00\n 1999-12-06T00:00:00-05:00\n\n\n\n\n\n","category":"method"},{"location":"#DateShifting.sequence_and_random_date_shift-Tuple{Random.AbstractRNG,Array{TimeZones.ZonedDateTime,1}}","page":"Home","title":"DateShifting.sequence_and_random_date_shift","text":"sequence_and_random_date_shift(rng::Random.AbstractRNG,\n                               input_zdt_list::Vector{TimeZones.ZonedDateTime},\n                               round_to::Dates.Period)\n\nArguments\n\ninput_zdt_list::Vector{TimeZones.ZonedDateTime}: A vector of ZonedDateTimes.\n\nKeyword Arguments\n\nround_to::Dates.Period: Resolution to which all intervals should be rounded.\ntime_zone::Dates.TimeZone: Time zone to which all output dates should be converted.\nday::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Day shift amount will be sampled.\nhour::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Hour shift amount will be sampled.\nminute::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Minute shift amount will be sampled.\nsecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Second shift amount will be sampled.\nmillisecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Millisecond shift amount will be sampled.\nmicrosecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Microsecond shift amount will be sampled.\nnanosecond::::Union{Distributions.Sampleable, Nothing}: Probability distribution from which the Nanosecond shift amount will be sampled.\n\nExample\n\njulia> using Dates\n\njulia> using DateShifting\n\njulia> using Distributions\n\njulia> using Random\n\njulia> using TimeZones\n\njulia> dates = [\n           ZonedDateTime(DateTime(\"2000-01-01T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-02-01T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-01-05T00:00:00\"), tz\"America/New_York\"),\n           ZonedDateTime(DateTime(\"2000-01-02T03:05:06\"), tz\"America/Chicago\"),\n           ZonedDateTime(DateTime(\"2000-01-02T01:02:03\"), tz\"America/New_York\"),\n       ]\n5-element Array{ZonedDateTime,1}:\n 2000-01-01T00:00:00-05:00\n 2000-02-01T00:00:00-05:00\n 2000-01-05T00:00:00-05:00\n 2000-01-02T03:05:06-06:00\n 2000-01-02T01:02:03-05:00\n\njulia> sequence, shifted_dates = sequence_and_random_date_shift(\n           Random.GLOBAL_RNG,\n           dates;\n           round_to = Day(1),\n           time_zone = TimeZone(\"America/New_York\"),\n           day = DiscreteUniform(-31, 31),\n           hour = DiscreteUniform(-24, 24),\n           minute = DiscreteUniform(-60, 60),\n           second = DiscreteUniform(-60, 60),\n           millisecond = DiscreteUniform(-1000, 1000),\n           microsecond = DiscreteUniform(-1000, 1000),\n           nanosecond = DiscreteUniform(-1000, 1000),\n       )\n([1, 5, 4, 3, 2], TimeZones.ZonedDateTime[ZonedDateTime(1999, 12, 5, tz\"America/New_York\"), ZonedDateTime(2000, 1, 5, tz\"America/New_York\"), ZonedDateTime(1999, 12, 9, tz\"America/New_York\"), ZonedDateTime(1999, 12, 6, tz\"America/New_York\"), ZonedDateTime(1999, 12, 6, tz\"America/New_York\")])\n\njulia> sequence\n5-element Array{Int64,1}:\n 1\n 5\n 4\n 3\n 2\n\njulia> shifted_dates\n5-element Array{ZonedDateTime,1}:\n 1999-12-05T00:00:00-05:00\n 2000-01-05T00:00:00-05:00\n 1999-12-09T00:00:00-05:00\n 1999-12-06T00:00:00-05:00\n 1999-12-06T00:00:00-05:00\n\n\n\n\n\n","category":"method"}]
}
